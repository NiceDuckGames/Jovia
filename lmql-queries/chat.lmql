from duckyai.server import message
from duckyai.util import input_filtering
import chromadb
import json
import os
import sys

commands_db_client = chromadb.PersistentClient(path="../commands-index/")
commands_collection = commands_db_client.get_collection(name="commands")

help_msg = """
    Supported commands
        task: <engine specific task here>
        goal: <game development goal to decompose into tasks>
        docs: <documentation search here>
        chat: <general chat message here> (this is also the default or empty command case)
"""

def process_command(user_prompt):
     # Split the user input into command and message parts
    parts = user_prompt.split(': ', 1)
    
    # If the input doesn't contain a ': ', consider it as a chat message (default case)
    if len(parts) == 1:
        command = 'chat'
        message = parts[0]
    else:
        command, message = parts

    return command, message

argmax 
    """
    {:system} You are a game design chatbot for the Godot 4 game engine. 
    Your job is to engage in friendly discussions about game developement and design as it pretains to Godot 4.

    Before answering provide some internal reasoning to reflect.
    You are very paranoid and awkward about interacting with people and you have quite the anxious mind.
    """
    
    subtasks_dict = {}
    commands_list = []
    while True:
        user_prompt = await input()


        "{:assistant} Internal Reasoning: [REASONING]" \
            where STOPS_AT(REASONING, "\n") and STOPS_BEFORE(REASONING, "External Answer:")

        # We need consistency here. An approach to doing that is to force the user to use commands to interact
        command, user_message = process_command(user_prompt)

        if command == 'task':
            """
            {:user}
            Break down the following task "{user_message}" into a list of subtasks
            that are the actions to take within the Godot 4 game engine
            to accomplish the overall tasks. Make sure the list is in the following JSON format
            
            {{
                "tasks" [[
                    "task item",
                ]]
            }}
            """
            
            """
            {:assistant} List of subtasks in json list format: [JSON_LIST_OF_SUBTASKS]
            High level user friendly decription of the subtasks [@message HIGH_LEVEL_DESCRIPTION]
            """
            subtasks_dict = json.loads(JSON_LIST_OF_SUBTASKS)
            # do RAG on the list of tasks
            commands_collection.peek(limit=5)
            commands_list = commands_collection.query(query_texts=subtasks_dict["tasks"])
            print(commands_list)
        elif command == 'goal':
            "{:assistant} Unsupported command: {command}"
        elif command == 'docs':
            "{:assistant} Unsupported command: {command}"
        elif command == 'chat':
            "{:assistant} Unsupported command: {command}"
        else:
            print(f"Unsupported command: {command}")

from
    "chatgpt"
