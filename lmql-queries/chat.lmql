from duckyai.server import message
from duckyai.util import input_filtering
import lmql
import chromadb
import json
import os
import sys

commands_db_client = chromadb.PersistentClient(path="../commands-index/")
commands_collection = commands_db_client.get_collection(name="commands")

help_msg = """
    Supported commands
        task: <engine specific task here>
        goal: <game development goal to decompose into tasks>
        docs: <documentation search here>
        chat: <general chat message here> (this is also the default or empty command case)
"""

def retreive_commands(tasks: list):
    return commands_collection.query(query_texts=tasks)

def parse_command(user_prompt):
     # Split the user input into command and message parts
    parts = user_prompt.split(': ', 1)
    
    # If the input doesn't contain a ': ', consider it as a chat message (default case)
    if len(parts) == 1:
        command = 'chat'
        message = parts[0]
    else:
        command, message = parts

    return command, message

@lmql.query
async def task_decomposition(prompt):
    '''lmql
    """
    {:user}
    Here is the following task {prompt}. Decompose it into a JSON list of subtasks like follows:

    [["subtask1","subtask2","subtaskN"]]

    Do not include subtasks that would require the user to use tools that are outside of Godot 4.
    ONLY generate subtasks which are actions that can be carried out within the Godot 4 game engine.
    Do not include newlines or any sort of numbering or list items that prefix each subtask.

    [JSON_LIST_OF_SUBTASKS]
    """
    return JSON_LIST_OF_SUBTASKS.strip()
    '''

@lmql.query
async def task_summarization(prompt):
    '''lmql
    """
    {:assistant}
    A high level summary of the following list of subtasks {prompt} [HIGH_LEVEL_SUMMARY]
    """
    return HIGH_LEVEL_SUMMARY.strip() 
    '''

argmax 
    """
    {:system} You are a game design chatbot for the Godot 4 game engine. 
    Your job is to engage in friendly discussions about game developement and design as it pretains to Godot 4.

    Before answering provide some internal reasoning to reflect.
    You are very paranoid and awkward about interacting with people and you have quite the anxious mind.
    """
    
    while True:
        user_prompt = await input()

        "{:assistant} Internal Reasoning: [REASONING]" \
            where STOPS_AT(REASONING, "\n") and STOPS_BEFORE(REASONING, "External Answer:")

        # We need consistency here. An approach to doing that is to force the user to use commands to interact
        command, user_message = parse_command(user_prompt)

        if command == 'task':
            print("HEEY")
            subtasks = await task_decomposition(user_message)
            summary = await task_summarization(subtasks)
            print(subtasks)
            print(summary)

            query_results = retreive_commands(json.loads(subtasks))
            print(query_results)
        elif command == 'goal':
            "{:assistant} Unsupported command: {command}"
        elif command == 'docs':
            "{:assistant} Unsupported command: {command}"
        elif command == 'chat':
            "{:assistant} Unsupported command: {command}"
        else:
            "{:assistant} Unsupported command: {command}"

from
    "chatgpt"
