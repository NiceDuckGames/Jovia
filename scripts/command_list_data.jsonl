{"prompt":"Create A 2D Character","response":[{"command_name":"create_scene","params":["CharacterBody2D","CharacterBody2D","res://character_body_2d.tscn"]},{"command_name":"open_scene","params":["res://character_body_2d.tscn"]},{"command_name":"create_script","params":["res://character_body_2d.gd","extends CharacterBody2D\n\n\nconst SPEED = 300.0\nconst JUMP_VELOCITY = -400.0\n\n# Get the gravity from the project settings to be synced with RigidBody nodes.\nvar gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")\n\n\nfunc _physics_process(delta):\n\t# Add the gravity.\n\tif not is_on_floor():\n\t\tvelocity.y += gravity * delta\n\n\t# Handle Jump.\n\tif Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():\n\t\tvelocity.y = JUMP_VELOCITY\n\n\t# Get the input direction and handle the movement/deceleration.\n\t# As good practice, you should replace UI actions with custom gameplay actions.\n\tvar direction = Input.get_axis(\"ui_left\", \"ui_right\")\n\tif direction:\n\t\tvelocity.x = direction * SPEED\n\telse:\n\t\tvelocity.x = move_toward(velocity.x, 0, SPEED)\n\n\tmove_and_slide()\n"]},{"command_name":"edit_script","params":["res://character_body_2d.gd","int(0)","int(0)"]},{"command_name":"load_resource","params":["res://character_body_2d.gd"]},{"command_name":"set_property","params":[".","script","$_"]},{"command_name":"add_node","params":[".","CollisionShape2D","CollisionShape2D"]},{"command_name":"create_resource","params":["CapsuleShape2D"]},{"command_name":"set_property","params":["CollisionShape2D","shape","$_"]},{"command_name":"save_scene","params":[]},{"command_name":"add_node","params":[".","Sprite2D","Sprite2D"]},{"command_name":"load_resource","params":["res://stick_man.png"]},{"command_name":"set_property","params":["Sprite2D","texture","$_"]},{"command_name":"save_scene","params":[]}]}
{"prompt":"Create a 3D character","response":[{"command_name":"create_scene","params":["CharacterBody3D","Character","res://character.tscn"]},{"command_name":"open_scene","params":["res://character.tscn"]},{"command_name":"add_node","params":[".","CollisionShape3D","CollisionShape3D"]},{"command_name":"create_resource","params":["CapsuleShape3D"]},{"command_name":"set_property","params":["CollisionShape3D","shape","$_"]},{"command_name":"add_node","params":[".","MeshInstance3D","MeshInstance3D"]},{"command_name":"create_resource","params":["CapsuleMesh"]},{"command_name":"set_property","params":["MeshInstance3D","mesh","$_"]},{"command_name":"create_script","params":["res://character.gd","extends CharacterBody3D\n\n\nconst SPEED = 5.0\nconst JUMP_VELOCITY = 4.5\n\n# Get the gravity from the project settings to be synced with RigidBody nodes.\nvar gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")\n\n\nfunc _physics_process(delta):\n\t# Add the gravity.\n\tif not is_on_floor():\n\t\tvelocity.y -= gravity * delta\n\n\t# Handle Jump.\n\tif Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():\n\t\tvelocity.y = JUMP_VELOCITY\n\n\t# Get the input direction and handle the movement/deceleration.\n\t# As good practice, you should replace UI actions with custom gameplay actions.\n\tvar input_dir = Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\")\n\tvar direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()\n\tif direction:\n\t\tvelocity.x = direction.x * SPEED\n\t\tvelocity.z = direction.z * SPEED\n\telse:\n\t\tvelocity.x = move_toward(velocity.x, 0, SPEED)\n\t\tvelocity.z = move_toward(velocity.z, 0, SPEED)\n\n\tmove_and_slide()\n"]},{"command_name":"edit_script","params":["res://character.gd","",""]},{"command_name":"load_resource","params":["res://character.gd"]},{"command_name":"set_property","params":[".","script","$_"]},{"command_name":"save_scene","params":[]}]}
{"prompt":"Run a scene","response":[{"command_name":"run_scene_from_file","params":["res://test.tscn"]}]}
{"prompt":"Open a scene","response":[{"command_name":"open_scene","params":["res://test.tscn"]}]}
{"prompt":"Create a 2D scene","response":[{"command_name":"create_scene","params":["Node2D","Node2D","res://node_2d.tscn"]},{"command_name":"open_scene","params":["res://node_2d.tscn"]}]}
{"prompt":"Connect a signal","response":[{"command_name":"connect_signal","params":["Sprite2D",".","frame_changed","_on_sprite_2d_frame_changed"]}]}
{"prompt":"Connect a signal to a new method","response":[{"command_name":"set_current_script_text","params":["extends Node2D\n\n\n# Called when the node enters the scene tree for the first time.\nfunc _ready():\n\tpass # Replace with function body.\n\n\n# Called every frame. 'delta' is the elapsed time since the previous frame.\nfunc _process(delta):\n\tpass\n\n\n\nfunc _on_sprite_2d_frame_changed():\n\tpass # Replace with function body.\n"]},{"command_name":"connect_signal","params":["Sprite2D",".","frame_changed","_on_sprite_2d_frame_changed"]}]}
{"prompt":"Attach a script","response":[{"command_name":"load_resource","params":["res://node_2d.gd"]},{"command_name":"set_property","params":[".","script","$_"]}]}
{"prompt":"Change node type","response":[{"command_name":"change_node_type","params":["Sprite2D","AnimatedSprite2D"]}]}
{"prompt":"Move a node","response":[{"command_name":"move_node","params":["Sprite2D","Node2D/Sprite2D"]}]}
{"prompt":"Add a node","response":[{"command_name":"add_node","params":[".","Node2D","Node2D2"]}]}
{"prompt":"Delete a node","response":[{"command_name":"delete_node","params":["Node2D2"]}]}
{"prompt":"Add a scene","response":[{"command_name":"add_scene","params":["res://test.tscn",".","World"]}]}
{"prompt":"Create a Resource","response":[{"command_name":"create_resource","params":["Resource"]},{"command_name":"save_resource","params":["res://new_resource.tres","$_"]}]}
{"prompt":"Set a node's property","response":[{"command_name":"set_property","params":["Node2D","position","Vector2(10, 0)"]}]}
{"prompt":"Set a node's resource property","response":[{"command_name":"load_resource","params":["res://stick_man.png"]},{"command_name":"set_property","params":["Node2D/Sprite2D","texture","$_"]}]}
{"prompt":"Set a script's source code","response":[{"command_name":"set_current_script_text","params":["extends Node2D\n\n\n# Called when the node enters the scene tree for the first time.\nfunc _ready():\n\tprint(\"Hello World!\")\n\n\n# Called every frame. 'delta' is the elapsed time since the previous frame.\nfunc _process(delta):\n\tpass\n\n\n\nfunc _on_sprite_2d_frame_changed():\n\tpass # Replace with function body.\n"]},{"command_name":"save_scene","params":[""]}]}
